var documenterSearchIndex = {"docs":
[{"location":"#ActuaryUtilities.jl-1","page":"Home","title":"ActuaryUtilities.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using ActuaryUtilities\n    using Dates\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [ActuaryUtilities]","category":"page"},{"location":"#ActuaryUtilities.InterestCurve-Tuple{Any,Any,LinearInterp}","page":"Home","title":"ActuaryUtilities.InterestCurve","text":"InterestCurve(rates,times,interpolation_method)\n\nCreates an InterestCurve object:\n\nrates are annual effective forward interest rates\ntimes are the end of the period for which the \ninterpolation_method is either option below (with StepwiseInterp() as the default)\nStepwiseInterp() which is an ActuaryUtilities.jl provided type which will use the given rate for the period up to the given time.\nFor example, with rates= [0.05,0.1] and times=[1,2] then 0.05 will be used for the period (0,1] and 0.1 will be used for the period (1,2].\nLinearInterp(), which linearly interpolates between times and is flat outside the boundaries of times.\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.breakeven-Tuple{Array{T,1} where T,Any}","page":"Home","title":"ActuaryUtilities.breakeven","text":"breakeven(cashflows::Vector,accumulation_rate::Real)\n\nCalculate the time when the accumulated cashflows breakeven. Assumes that :\n\ncashflows evenly spaced with the first one occuring at time zero \ncashflows occur at the end of the period\nthat the accumulation rate correponds to the periodicity of the cashflows.\n\nReturns nothing if cashflow stream never breaks even.\n\njulia> breakeven([-10,1,2,3,4,8],0.10)\n5\n\njulia> breakeven([-10,15,2,3,4,8],0.10)\n1\n\njulia> breakeven([-10,-15,2,3,4,8],0.10) # returns the `nothing` value\n\n\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.breakeven-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Home","title":"ActuaryUtilities.breakeven","text":"breakeven(cashflows::Vector,timepoints::Vector, accumulation_rate)\n\nCalculate the time when the accumulated cashflows breakeven. Assumes that:\n\ncashflows occur at the timepoint indicated at the corresponding timepoints position\ncashflows occur at the end of the period\nthat the accumulation rate corresponds to the periodicity of the cashflows. \nIf given a vector of \n\ninterest rates, the first rate is effectively never used, as it's treated as the accumulation  rate between time zero and the first cashflow.\n\nReturns nothing if cashflow stream never breaks even.\n\njulia> times = [0,1,2,3,4,5];\n\njulia> breakeven([-10,1,2,3,4,8],times,0.10)\n5\n\njulia> breakeven([-10,15,2,3,4,8],times,0.10)\n1\n\njulia> breakeven([-10,-15,2,3,4,8],times,0.10) # returns the `nothing` value\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.discount_rate-Tuple{Any,Any}","page":"Home","title":"ActuaryUtilities.discount_rate","text":"discount_rate(rate,times)\n\nTurn a rate into a given discount vector matching the times given.\n\nExamples\n\njulia> discount_rate(0.05,1)\n0.9523809523809523\n\njulia> discount_rate.(0.05,1:3) # function can be broadcasted\n3-element Array{Float64,1}:\n 0.9523809523809523\n 0.9070294784580498\n 0.863837598531476\n\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.discount_rate-Tuple{InterestCurve,Any}","page":"Home","title":"ActuaryUtilities.discount_rate","text":"interest_rate(InterestCurve,time)\n\nReturn the discount rate at time. \n\nInternally, this method is general in that it will use the interpolated interest rate to use an integral approxmation to the accumulated force of interest.\n\nExamples\n\njulia> ic = InterestCurve([0.01,0.05,0.05,0.1],[1,2,3,4])\n\njulia> discount_rate(ic,1)\n0.9900990099009901\n\njulia> discount_rate.(ic,0:4) # function is broadcastable\n5-element Array{Float64,1}:\n 1.0\n 0.9900990099009901\n 0.9613215887833819\n 0.9155443705701612\n 0.8517459660161829\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.duration-Tuple{DV01,Any,Any,Any}","page":"Home","title":"ActuaryUtilities.duration","text":"duration(::DV01,int,cfs,times)\n\nCalculates the DV01, with a fixed int (e.g. 0.05). int should be an annual effective interest rate, not a bond effective yield.\n\nNot yet generalized for InterestCurve arguments\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.duration-Tuple{Dates.Date,Dates.Date}","page":"Home","title":"ActuaryUtilities.duration","text":"duration(d1::Date, d2::Date)\n\nCompute the duration given two dates, which is the number of years since the first date. The interval [0,1) is defined as having  duration 1. Can return negative durations if second argument is before the first.\n\njulia> issue_date  = Date(2018,9,30);\n\njulia> duration(issue_date , Date(2019,9,30) ) \n2\njulia> duration(issue_date , issue_date) \n1\njulia> duration(issue_date , Date(2018,10,1) ) \n1\njulia> duration(issue_date , Date(2019,10,1) ) \n2\njulia> duration(issue_date , Date(2018,6,30) ) \n0\njulia> duration(Date(2018,9,30),Date(2017,6,30)) \n-1\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.duration-Tuple{Macaulay,Any,Any,Any}","page":"Home","title":"ActuaryUtilities.duration","text":"duration(::Macaulay,int,cfs,times)\n\nCalculates the Macaulay duration, with a fixed int (e.g. 0.05). int should be an annual effective interest rate, not a bond effective yield.\n\nNot yet generalized for InterestCurve arguments.\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.duration-Tuple{Modified,Any,Any,Any}","page":"Home","title":"ActuaryUtilities.duration","text":"duration(::Modified,int,cfs,times)\n\nCalculates the Modified duration, with a fixed int (e.g. 0.05). int should be an annual effective interest rate, not a bond effective yield.\n\nNot yet generalized for InterestCurve arguments\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.interest_rate-Tuple{Any,Any}","page":"Home","title":"ActuaryUtilities.interest_rate","text":"interest_rate(i,time)\n\nReturns i at all times.\n\nExamples\n\njulia> interest_rate(0.05,1)\n0.05\n\njulia> interest_rate.(0.05,1:3) # function can be broadcasted\n3-element Array{Float64,1}:\n0.05\n0.05\n0.05\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.interest_rate-Tuple{InterestCurve,Any}","page":"Home","title":"ActuaryUtilities.interest_rate","text":"interest_rate(InterestCurve,time)\n\nReturn the interest rate at the instant time.\n\nExamples\n\njulia> ic = InterestCurve([0.01,0.05,0.05,0.1],[1,2,3,4])\n\njulia> interest_rate(ic,1)\n0.01\n\njulia> interest_rate.(ic,0:4) # function is broadcastable\n5-element Array{Float64,1}:\n 0.01\n 0.01\n 0.05\n 0.05\n 0.1\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.internal_rate_of_return-Tuple{Any,Any}","page":"Home","title":"ActuaryUtilities.internal_rate_of_return","text":"internal_rate_of_return(cashflows::Vector, timepoints::Vector)\n\nCalculate the internalrateof_return with given timepoints.  First tries to find a positive rate in the interval [0.0,1.0]. If none is found, will extend search to [-1.0,1.0]. If still not found, will return nothing.\n\njulia> internal_rate_of_return([-100,110],[0,1]) # e.g. cashflows at time 0 and 1\n0.10000000001652906\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.internal_rate_of_return-Tuple{Any}","page":"Home","title":"ActuaryUtilities.internal_rate_of_return","text":"internal_rate_of_return(cashflows::vector)\n\nCalculate the internalrateof_return of a series of equally spaced cashflows, assuming the first  element occurs at time zero. First tries to find a positive rate in the interval [0.0,1.0]. If none is found, will extend search to [-1.0,1.0]. If still not found, will return nothing.\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.irr","page":"Home","title":"ActuaryUtilities.irr","text":"irr()\n\nA shorthand for `internal_rate_of_return`.\n\n\n\n\n\n","category":"function"},{"location":"#ActuaryUtilities.present_value-Tuple{Any,Any}","page":"Home","title":"ActuaryUtilities.present_value","text":"pv(interest_rate::Real, cashflows::Vector)\n\nDiscount the cashflows vector at the given decimal interest_rate. It is assumed that the cashflows are  periodic commisurate with the period of the interest rate (ie use an annual rate for  annual values in the vector, quarterly interest rate for quarterly cashflows). The first value of the cashflows vector is assumed to occur at the end of period 1.\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.present_value-Tuple{Array,Any,Any}","page":"Home","title":"ActuaryUtilities.present_value","text":"present_value(interest_rate::Real, cashflows::Vector, timepoints)\n\nDiscount the cashflows vector at the given scalar or vector interest_rate,  with the cashflows occurring at the times specified in timepoints. \n\njulia> present_value(0.1, [10,20],[0,1])\n28.18181818181818\n\nExample on how to use real dates using the DayCounts.jl package\n\n\nusing DayCounts \ndates = Date(2012,12,31):Year(1):Date(2013,12,31)\ntimes = map(d -> yearfrac(dates[1], d, DayCounts.Actual365Fixed()),dates) # [0.0,1.0]\npresent_value(0.1, [10,20],times)\n\n# output\n28.18181818181818\n\n\n\n\n\n\n\n","category":"method"},{"location":"#ActuaryUtilities.pv","page":"Home","title":"ActuaryUtilities.pv","text":"pv()\n\nA shorthand for `present_value`.\n\n\n\n\n\n","category":"function"},{"location":"#ActuaryUtilities.years_between","page":"Home","title":"ActuaryUtilities.years_between","text":"Years_Between(d1::Date, d2::Date)\n\nCompute the number of integer years between two dates, with the  first date typically before the second. Will return negative number if first date is after the second. Use third argument to indicate if calendar  anniversary should count as a full year.\n\nExamples\n\njulia> d1 = Date(2018,09,30);\n\njulia> d2 = Date(2019,09,30);\n\njulia> d3 = Date(2019,10,01);\n\njulia> years_between(d1,d3) \n1\njulia> years_between(d1,d2,false) # same month/day but `false` overlap\n0 \njulia> years_between(d1,d2) # same month/day but `true` overlap\n1 \njulia> years_between(d1,d2) # using default `true` overlap\n1 \n\n\n\n\n\n","category":"function"}]
}
